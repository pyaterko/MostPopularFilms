plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
}

android {
    compileSdkVersion Config.compile_sdk
    defaultConfig {
        applicationId Config.application_id
        minSdkVersion Config.min_sdk
        targetSdkVersion Config.target_sdk
        versionCode Releases.version_code
        versionName Releases.version_name
        testInstrumentationRunner UnitRunner.unitRunner
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility Config.java_version
        targetCompatibility Config.java_version
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }

    buildTypes.each {
        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        //TheMovieDb https://developers.themoviedb.org/3/getting-started/introduction
        //  для демонстрации работы MotionLayout в приложение без получения MOVIE_API_KEY в адаптерах
        //  (ActorAdapter  MovieAdapter)
        //  раскомментируйте код внутри списка
        //        MOVIE_API_KEY="YOU_API_KEY"
        //        MOVIE_BASE_URL="https://api.themoviedb.org/3/"
        //        MOVIE_POSTER_PATH="https://image.tmdb.org/t/p/original/"
        //        MOVIE_BACKDROP_PATH="https://image.tmdb.org/t/p/original/"
        def movieApiKey = properties.getProperty("MOVIE_API_KEY", "")
        it.buildConfigField "String", "MOVIE_API_KEY", movieApiKey
        def movieBaseUrl = properties.getProperty("MOVIE_BASE_URL", "")
        it.buildConfigField "String", "MOVIE_BASE_URL", movieBaseUrl
        def posterPath = properties.getProperty("MOVIE_POSTER_PATH", "")
        it.buildConfigField "String", "MOVIE_POSTER_PATH", posterPath
        def backDropPath = properties.getProperty("MOVIE_BACKDROP_PATH", "")
        it.buildConfigField "String", "MOVIE_BACKDROP_PATH", backDropPath
    }
}

dependencies {

    implementation Design.appcompat
    implementation Design.material
    implementation Kotlin.core
    implementation Kotlin.stdlib
    implementation Kotlin.coroutines_android
    implementation Kotlin.coroutines_core
    implementation ViewBindingDelegate.viewbindingpropertydelegate
    implementation ViewBindingDelegate.noreflection
    implementation Fragment.fragmentktx
    implementation Fragment.navigation_fragment_ktx
    implementation Dagger.dagger
    kapt Dagger.dagger_compiler
    implementation Navigation.navUiKtx
    implementation Navigation.navFragmentKtx
    implementation Glide.glide
    implementation Glide.glideIntegration
    kapt Glide.glide_compiler
    implementation Retrofit.converter_gson
    implementation Retrofit.adapter_coroutines
    implementation Retrofit.retrofit
    implementation Okhttp.okhttp

}